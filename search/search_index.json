{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 Hologit lets you declaratively define virtual sub-branches within any Git branch Quick Start Grand Tour Installation Repository Setup Holosources Holobranches Hololenses Holoreactors Workflows Work on Sources Publish a docs/ tree to Gitbook and gh-pages Publish a Static Website Operationalize a Data Set Developing an Emergence Site Reference Architecture Commands Filesystem","title":"Getting Started"},{"location":"#getting-started","text":"Hologit lets you declaratively define virtual sub-branches within any Git branch Quick Start Grand Tour Installation Repository Setup Holosources Holobranches Hololenses Holoreactors Workflows Work on Sources Publish a docs/ tree to Gitbook and gh-pages Publish a Static Website Operationalize a Data Set Developing an Emergence Site Reference Architecture Commands Filesystem","title":"Getting Started"},{"location":"grand-tour/","text":"Introduction \u00b6 This section offers a deep-dive into how each component works.","title":"Introduction"},{"location":"grand-tour/#introduction","text":"This section offers a deep-dive into how each component works.","title":"Introduction"},{"location":"grand-tour/holobranches/","text":"Holobranches \u00b6 Holobranches are named virtual sub-branches versioned within any Git branch. Given the name of a holobranch and a commit for a branch it\u2019s defined in, Hologit can compute the holobranch\u2019s content and outputs a Git tree.","title":"Holobranches"},{"location":"grand-tour/holobranches/#holobranches","text":"Holobranches are named virtual sub-branches versioned within any Git branch. Given the name of a holobranch and a commit for a branch it\u2019s defined in, Hologit can compute the holobranch\u2019s content and outputs a Git tree.","title":"Holobranches"},{"location":"grand-tour/hololenses/","text":"Hololenses \u00b6 Hololenses are executable tools bound to transform some portion of a holobranch during its projectios.","title":"Hololenses"},{"location":"grand-tour/hololenses/#hololenses","text":"Hololenses are executable tools bound to transform some portion of a holobranch during its projectios.","title":"Hololenses"},{"location":"grand-tour/holoreactors/","text":"Holoreactors \u00b6 Holoreactors are running services spawned from the content within a holobranch and automatically bound to its changes.","title":"Holoreactors"},{"location":"grand-tour/holoreactors/#holoreactors","text":"Holoreactors are running services spawned from the content within a holobranch and automatically bound to its changes.","title":"Holoreactors"},{"location":"grand-tour/holosources/","text":"Holosources \u00b6 Holosources are named remote Git branches that content can be pulled from during projection. They can refer to any ref or hash in a remote repository, and optionally a holobranch within that. Overriding via environment \u00b6 Holosources can be overridden via HOLO_SOURCE_* environment variables. Variable names \u00b6 For example, a source named parent-blueprint could be overridden via HOLO_SOURCE_PARENT_BLUEPRINT . The transformation from source name to environment variable name is applied as follows: Hyphens ( - ) replaced with underscores ( _ ) All letters capitalized Change URL \u00b6 You can change just the URL, preserving declared ref+holobranch: HOLO_SOURCE_PARENT_BLUEPRINT = \"https://github.com/myorg/myfork\" Local paths work too: HOLO_SOURCE_PARENT_BLUEPRINT = \"/src/myfork\" Change ref \u00b6 You can change just the ref, preserving declared url+holobranch: HOLO_SOURCE_PARENT_BLUEPRINT = \"#refs/heads/develop\" Change holobranch \u00b6 You can change just the holobranch, preserving declared url+ref: HOLO_SOURCE_PARENT_BLUEPRINT = \"=>helm-chart\" Change everything \u00b6 You can reconfigure an entire source: HOLO_SOURCE_PARENT_BLUEPRINT = \"/src/myfork#refs/heads/develop=>helm-chart\" Or clear out a declared holobranch component to use a native ref directly: HOLO_SOURCE_PARENT_BLUEPRINT = \"/src/myfork#refs/heads/develop=>\"","title":"Holosources"},{"location":"grand-tour/holosources/#holosources","text":"Holosources are named remote Git branches that content can be pulled from during projection. They can refer to any ref or hash in a remote repository, and optionally a holobranch within that.","title":"Holosources"},{"location":"grand-tour/holosources/#overriding-via-environment","text":"Holosources can be overridden via HOLO_SOURCE_* environment variables.","title":"Overriding via environment"},{"location":"grand-tour/holosources/#variable-names","text":"For example, a source named parent-blueprint could be overridden via HOLO_SOURCE_PARENT_BLUEPRINT . The transformation from source name to environment variable name is applied as follows: Hyphens ( - ) replaced with underscores ( _ ) All letters capitalized","title":"Variable names"},{"location":"grand-tour/holosources/#change-url","text":"You can change just the URL, preserving declared ref+holobranch: HOLO_SOURCE_PARENT_BLUEPRINT = \"https://github.com/myorg/myfork\" Local paths work too: HOLO_SOURCE_PARENT_BLUEPRINT = \"/src/myfork\"","title":"Change URL"},{"location":"grand-tour/holosources/#change-ref","text":"You can change just the ref, preserving declared url+holobranch: HOLO_SOURCE_PARENT_BLUEPRINT = \"#refs/heads/develop\"","title":"Change ref"},{"location":"grand-tour/holosources/#change-holobranch","text":"You can change just the holobranch, preserving declared url+ref: HOLO_SOURCE_PARENT_BLUEPRINT = \"=>helm-chart\"","title":"Change holobranch"},{"location":"grand-tour/holosources/#change-everything","text":"You can reconfigure an entire source: HOLO_SOURCE_PARENT_BLUEPRINT = \"/src/myfork#refs/heads/develop=>helm-chart\" Or clear out a declared holobranch component to use a native ref directly: HOLO_SOURCE_PARENT_BLUEPRINT = \"/src/myfork#refs/heads/develop=>\"","title":"Change everything"},{"location":"grand-tour/installation/","text":"Grand Tour: Installation \u00b6 Hologit can be installed via habitat (best option in Linux environments): $ hab pkg install -b jarvus/hologit \u00bb Installing jarvus/hologit \u2601 Determining latest version of jarvus/hologit in the 'stable' channel \u2192 Using jarvus/hologit/0.4.1/20181224022822 \u2605 Install of jarvus/hologit/0.4.1/20181224022822 complete with 0 new packages installed. \u00bb Binlinking git-holo from jarvus/hologit/0.4.1/20181224022822 into /bin \u2605 Binlinked git-holo from jarvus/hologit/0.4.1/20181224022822 to /bin/git-holo or with npm (best option in Mac environments): $ git --version # ensure >= 2.8.0 git version 2.17.2 (Apple Git-113) $ node --version # ensure >= 8.3.0 v11.5.0 $ npm install -g hologit /usr/local/bin/git-holo -> /usr/local/lib/node_modules/hologit/bin/cli.js + hologit@0.4.1 updated 1 package in 1.947s Optional: watchman for working trees \u00b6 Install watchman to enable watching working trees via habitat (best option in Linux environments): $ hab pkg install -b jarvus/watchman \u00bb Installing jarvus/watchman \u2601 Determining latest version of jarvus/watchman in the 'stable' channel \u2192 Using jarvus/watchman/4.9.0/20180624025538 \u2605 Install of jarvus/watchman/4.9.0/20180624025538 complete with 0 new packages installed. \u00bb Binlinking watchman from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman \u00bb Binlinking watchman-make from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-make from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-make \u00bb Binlinking watchman-wait from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-wait from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-wait $ mkdir -m 777 -p /hab/svc/watchman/var or with homebrew (best option in Mac environments): $ brew install watchman ==> Downloading https://homebrew.bintray.com/bottles/watchman-4.9.0_2.mojave.bottle.tar.gz Already downloaded: /Users/chris/Library/Caches/Homebrew/downloads/01bca112fb1c6fe86d4068af4635ca8a47a53688bb3597c4ac5e45e49fe1de27--watchman-4.9.0_2.mojave.bottle.tar.gz ==> Pouring watchman-4.9.0_2.mojave.bottle.tar.gz ==> launchctl unload -F /Users/chris/Library/LaunchAgents/com.github.facebook.watchman.plist \ud83c\udf7a /usr/local/Cellar/watchman/4.9.0_2: 23 files, 2.1MB","title":"Grand Tour: Installation"},{"location":"grand-tour/installation/#grand-tour-installation","text":"Hologit can be installed via habitat (best option in Linux environments): $ hab pkg install -b jarvus/hologit \u00bb Installing jarvus/hologit \u2601 Determining latest version of jarvus/hologit in the 'stable' channel \u2192 Using jarvus/hologit/0.4.1/20181224022822 \u2605 Install of jarvus/hologit/0.4.1/20181224022822 complete with 0 new packages installed. \u00bb Binlinking git-holo from jarvus/hologit/0.4.1/20181224022822 into /bin \u2605 Binlinked git-holo from jarvus/hologit/0.4.1/20181224022822 to /bin/git-holo or with npm (best option in Mac environments): $ git --version # ensure >= 2.8.0 git version 2.17.2 (Apple Git-113) $ node --version # ensure >= 8.3.0 v11.5.0 $ npm install -g hologit /usr/local/bin/git-holo -> /usr/local/lib/node_modules/hologit/bin/cli.js + hologit@0.4.1 updated 1 package in 1.947s","title":"Grand Tour: Installation"},{"location":"grand-tour/installation/#optional-watchman-for-working-trees","text":"Install watchman to enable watching working trees via habitat (best option in Linux environments): $ hab pkg install -b jarvus/watchman \u00bb Installing jarvus/watchman \u2601 Determining latest version of jarvus/watchman in the 'stable' channel \u2192 Using jarvus/watchman/4.9.0/20180624025538 \u2605 Install of jarvus/watchman/4.9.0/20180624025538 complete with 0 new packages installed. \u00bb Binlinking watchman from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman \u00bb Binlinking watchman-make from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-make from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-make \u00bb Binlinking watchman-wait from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-wait from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-wait $ mkdir -m 777 -p /hab/svc/watchman/var or with homebrew (best option in Mac environments): $ brew install watchman ==> Downloading https://homebrew.bintray.com/bottles/watchman-4.9.0_2.mojave.bottle.tar.gz Already downloaded: /Users/chris/Library/Caches/Homebrew/downloads/01bca112fb1c6fe86d4068af4635ca8a47a53688bb3597c4ac5e45e49fe1de27--watchman-4.9.0_2.mojave.bottle.tar.gz ==> Pouring watchman-4.9.0_2.mojave.bottle.tar.gz ==> launchctl unload -F /Users/chris/Library/LaunchAgents/com.github.facebook.watchman.plist \ud83c\udf7a /usr/local/Cellar/watchman/4.9.0_2: 23 files, 2.1MB","title":"Optional: watchman for working trees"},{"location":"grand-tour/repository-setup/","text":"Repository setup \u00b6 To enable using hologit on a repository, create .holo/config.toml and configure holospace.name within it. You can create the file yourself, or use the provided command: git holo init The name declared here is the holosource name used to refer to the host repository.","title":"Repository setup"},{"location":"grand-tour/repository-setup/#repository-setup","text":"To enable using hologit on a repository, create .holo/config.toml and configure holospace.name within it. You can create the file yourself, or use the provided command: git holo init The name declared here is the holosource name used to refer to the host repository.","title":"Repository setup"},{"location":"workflows/","text":"Introduction \u00b6 This section offers end-to-end examples of workflows you can implement.","title":"Introduction"},{"location":"workflows/#introduction","text":"This section offers end-to-end examples of workflows you can implement.","title":"Introduction"},{"location":"workflows/work-on-sources/","text":"Work on Sources \u00b6 There are currently two supported methods for working on sources concurrently with working on your project: Environmental source overrides Source submodule checkouts Of the two, environmental source overrides are the more mature feature and recommended for now. Method 1: Environmental Source Overrides (Recommended) \u00b6 Environment variables based on the names of sources can be set to override their URL, ref, and optionally holobranch: export HOLO_SOURCE_<SOURCE_NAME> = \"[url][#ref][=>holobranch]\" Source names must be uppercased and all - (hyphen) characters changed to _ (underscore). Existing values can be used by omitting values to the left, but ommitted values to the right will be cleared. The --working option currently has no effect on overridden sources: working tree changes for sources will be ignored. You\u2019ll need to commit any changes to use them in downstream builds, but you don\u2019t need to push those commits and you can rewrite/amend them continuously. For example, give a source name of skeleton-v1 : export HOLO_SOURCE_SKELETON_V1 = \"=>emergence-vfs-site\" # use existing url+ref, override holobranch export HOLO_SOURCE_SKELETON_V1 = \"=>\" # use existing url+ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop\" # use existing url, change ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop=>emergence-skeleton\" # use existing url, change ref, keep holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1\" # change url, clear ref+holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" # change url+ref, keep holobranch Environmental source overrides will be honored at every depth when using subprojections as sources, so while working on a project using skeleton-v2 as a source, you could work on skeleton-v2 and its source skeleton-v1 simultaneously: export HOLO_SOURCE_SKELETON_V2 = \"/src/skeleton-v2#refs/heads/develop=>emergence-skeleton\" export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" While working like this, you likely also want to environmentally instruct all hologit commands to always fetch the latest for these sources. This won\u2019t add an appreciable delay for local sources, but could slow down working against remote sources that aren\u2019t changing anyway: export HOLO_FETCH = \"skeleton-v1:skeleton-v2\" Method 2: Source Submodule Checkouts (Work in Progress) \u00b6 Check out a named source as a submodule: git holo source checkout skeleton-v1","title":"Work on Sources"},{"location":"workflows/work-on-sources/#work-on-sources","text":"There are currently two supported methods for working on sources concurrently with working on your project: Environmental source overrides Source submodule checkouts Of the two, environmental source overrides are the more mature feature and recommended for now.","title":"Work on Sources"},{"location":"workflows/work-on-sources/#method-1-environmental-source-overrides-recommended","text":"Environment variables based on the names of sources can be set to override their URL, ref, and optionally holobranch: export HOLO_SOURCE_<SOURCE_NAME> = \"[url][#ref][=>holobranch]\" Source names must be uppercased and all - (hyphen) characters changed to _ (underscore). Existing values can be used by omitting values to the left, but ommitted values to the right will be cleared. The --working option currently has no effect on overridden sources: working tree changes for sources will be ignored. You\u2019ll need to commit any changes to use them in downstream builds, but you don\u2019t need to push those commits and you can rewrite/amend them continuously. For example, give a source name of skeleton-v1 : export HOLO_SOURCE_SKELETON_V1 = \"=>emergence-vfs-site\" # use existing url+ref, override holobranch export HOLO_SOURCE_SKELETON_V1 = \"=>\" # use existing url+ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop\" # use existing url, change ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop=>emergence-skeleton\" # use existing url, change ref, keep holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1\" # change url, clear ref+holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" # change url+ref, keep holobranch Environmental source overrides will be honored at every depth when using subprojections as sources, so while working on a project using skeleton-v2 as a source, you could work on skeleton-v2 and its source skeleton-v1 simultaneously: export HOLO_SOURCE_SKELETON_V2 = \"/src/skeleton-v2#refs/heads/develop=>emergence-skeleton\" export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" While working like this, you likely also want to environmentally instruct all hologit commands to always fetch the latest for these sources. This won\u2019t add an appreciable delay for local sources, but could slow down working against remote sources that aren\u2019t changing anyway: export HOLO_FETCH = \"skeleton-v1:skeleton-v2\"","title":"Method 1: Environmental Source Overrides (Recommended)"},{"location":"workflows/work-on-sources/#method-2-source-submodule-checkouts-work-in-progress","text":"Check out a named source as a submodule: git holo source checkout skeleton-v1","title":"Method 2: Source Submodule Checkouts (Work in Progress)"}]}